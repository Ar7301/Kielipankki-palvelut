#! /bin/bash -Ee

# Note on /bin/bash: the use of `trap' on `ERR' is available on bash
# but not on dash, and sh may be dash on some computers.

PORT=3141

# Either  or --GET. Make it a command line parameter some day.
GET=

# Sleep to give mongoose time to print its startup message first
mongoose/mongoose -r ./cgi -p $PORT -C '**/cgi/que' 2>&1 & sleep 1
SERVER=$!

mkdir --parents out

clean () {
    
    # Sleep to give mongoose time to print its final message first. Is
    # that message in stdout because stderr was directed there when
    # mongoose was started? Inquiring minds are too lazy to find out.
    kill $SERVER && sleep 1 && echo all done
    exit $1
}

call () {
    WHAT="$1"
    curl $GET \
	--silent --show-error \
	--trace-ascii "out/trace" \
	--dump-header "out/head" \
	--output "out/body" \
	"http://localhost:$PORT/que?$WHAT"
}

inhead () {
    if grep --silent "$@" out/head
    then true
    else echo '!FAIL of in-head:' "$@"
    fi
}

inbody () {
    if grep --silent "$@" out/body
    then true
    else echo '!FAIL of in-body:' "$@"
    fi
}

notinhead () {
    if grep --silent "$@" out/head
    then echo '!FAIL of not-in-head:' "$@"
    else true
    fi
}

notinbody () {
    if grep --silent "$@" out/body
    then echo '!FAIL of not-in-body:' "$@"
    else true
    fi
}

# With -Ee, ERR traps when there is an error, and when something
# returns non-zero that is not otherwise handled appropriately.
trap clean ERR

echo @ no question mark no nothing
curl $GET \
    --silent --show-error \
    --trace-ascii "out/trace" \
    --dump-header "out/head" \
    --output "out/body" \
    "http://localhost:$PORT/que"
inhead -F '200 OK'
inbody -F '<error code='

echo @ question mark but no query
call ''
inhead -F '200 OK'
inbody -F '<error code='

echo @ Identify
call verb=Identify
inhead -F '200 OK'
inbody -F '<Identify>'
notinbody -F '<error'

echo @ ListMetadataFormats
call verb=ListMetadataFormats
inhead -F '200 OK'
inbody -F '<ListMetadataFormats>'
notinbody -F '<error'

echo @ ListIdentifiers, no format
call verb=ListIdentifiers
inhead -F '200 OK'
notinbody -F '<ListIdentifiers>'
inbody -F '<error code='

echo @ ListIdentifiers, OLAC
call "verb=ListIdentifiers&metadataPrefix=olac"
inhead -F '200 OK'
inbody -F '<ListIdentifiers>'
notinbody -F '<error>'

echo @ ListRecords, OLAC
call "verb=ListRecords&metadataPrefix=olac"
inhead -F '200 OK'
inbody -F '<ListRecords>'
notinbody -F '<error>'

# Exercises a bug in www/que at 2013-05-21, see TODO
echo @ ListSets
call verb=ListSets
inhead -F '200 OK'

echo @ GetRecord with bogus identifier
call "verb=GetRecord&identifier=oai:example.com:nsr&metadataPrefix=olac"
inhead -F '200 OK'
inbody -F '<error'

# Exercises a bug in www/que at 2013-06-03, see TODO
echo @ Resume ListRecords with bogus token
call "verb=ListRecords&resumptionToken=B0GuS"
inhead -F '200 OK'
inbody -F '<error'
cp out/body out/bogus

echo @ GetRecord with existing identifier
call "verb=ListIdentifiers&metadataPrefix=olac"
inhead -F '200 OK'
xsltproc xsl/OAIidentifiers.xsl out/body |
while read IDENT DATE STATE
do
    call "verb=GetRecord&identifier=$IDENT&metadataPrefix=olac"
    inhead -F '200 OK'
    inbody -F '<record>'
    break
done
# TODO: above, find a deleted record if any, and non-deleted

# OAItoken.xsl extracts resumptionToken=xxx from an OAI-PMH record
# with a resumption token, resumptionToken= from one with an empty
# resumptionToken element, and noResumptionToken from one with no
# resumption token element.
echo @ Full ListIdentifiers cycle
call "verb=ListIdentifiers&metadataPrefix=olac"
inhead -F '200 OK'
while xsltproc xsl/OAItoken.xsl out/body | grep -q 'resumptionToken=.'
do
    TOKEN=$(xsltproc xsl/OAItoken.xsl out/body)
    echo "$TOKEN"
    call "verb=ListIdentifiers&$TOKEN"
    inhead -F '200 OK'
    inbody -F '<header>'
    notinbody -F '<metadata>'
    notinbody -F '<error'
    notinbody -F Exception:
done

# Wonder what it should be when resumption calls use a different verb
# than the initiating call :) But the main thing is to test the cycle.
echo @ Full ListRecords cycle
call "verb=ListRecords&metadataPrefix=olac"
inhead -F '200 OK'
inbody -F '<record>'
inbody -F '<header>'
inbody -E '<metadata|deleted'
while xsltproc xsl/OAItoken.xsl out/body | grep -q 'resumptionToken=.'
do
    TOKEN=$(xsltproc xsl/OAItoken.xsl out/body)
    echo "$TOKEN"
    call "verb=ListRecords&$TOKEN"
    inhead -F '200 OK'
    inbody -F '<record>'
    inbody -F '<header>'
    inbody -E '<metadata|deleted'
    notinbody -F '<error'
    notinbody -F Exception:
done

clean
