<?php
# {{ ansible_managed }}

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

$IP = __DIR__;

// Some hacks for rebuilding localisation cache only once for all instances
$wgLocalisationCacheConf['store'] = 'file';
$wgLocalisationCacheConf['manualRecache'] = true;
$wgLocalisationCacheConf['storeDirectory'] = "$IP/cache";

if ( isset( $_ENV['FORLC'] ) && $_ENV['FORLC'] ) {
	$wgServer = 'https://localhost';

	$wgMessagesDirs['LC-ReCaptchaNoCaptcha'] = "$IP/extensions/ConfirmEdit/ReCaptchaNoCaptcha/i18n";
	$wgMessagesDirs['LC-Wikibaseclient'] = "$IP/extensions/Wikibase/client/i18n";
	$wgExtensionMessagesFiles['LC-wikibaseclientmagic'] = "$IP/extensions/Wikibase/client/WikibaseClient.i18n.magic.php";
	$wgExtensionMessagesFiles['LC-Wikibaseclientalias'] = "$IP/extensions/Wikibase/client/WikibaseClient.i18n.alias.php";

	if ( file_exists( '/srv/mediawiki/MessagesSettings.php' ) ) {
		require '/srv/mediawiki/MessagesSettings.php';
	}
	return;
}

# The version of Apache on CENTOS is too old to set environment variables.
# And it does not seem to provide the canonical domain name either. So
# dig out the canonical name from the webroot.
if ( isset( $_ENV['DOCUMENT_ROOT'] ) ) {
	$VHOST = preg_replace( '~^/www/([^/]+)/docroot$~', '\1', $_ENV['DOCUMENT_ROOT'] );
} elseif ( defined( 'MW_DB' ) ) {
	# Set by --wiki parameter for scripts
	$VHOST = MW_DB;
	$wgShowExceptionDetails = true;
	$wgShowDBErrorBacktrace = true;
} else {
	echo "Wiki instance must be given. Use --wiki parameter for command line scripts.\n";
	exit();
}

if ( !file_exists( __DIR__ . "/LocalSettings-$VHOST.php" ) ) {
	$VHOST = htmlspecialchars( $VHOST );
	echo "Unknown wiki instance $VHOST\n";
	exit();
}

$wgServer = $wgCanonicalServer = "https://$VHOST";

ini_set( 'error_log', "/www/$VHOST/logs/error_php" );
ini_set( 'display_errors',         0 );
ini_set( 'ignore_repeated_errors', 1 );
ini_set( 'log_errors',             1 );
ini_set( 'expose_php',             0 );
ini_set( 'memory_limit',      '450M' );
ini_set( 'max_execution_time', '60s' );
$wgDebugLogGroups['exception'] = ini_get( 'error_log' );
$wgDebugLogGroups['error'] = ini_get( 'error_log' );
$wgDebugLogGroups['fatal'] = ini_get( 'error_log' );

error_reporting( E_ALL | E_STRICT );
date_default_timezone_set( 'UTC' );
$wgLocaltimezone = 'Europe/Helsinki';

$wgSecretKey = file_get_contents( "/www/$VHOST/secretkey" );

$wgArticlePath = "/wiki/$1";
$wgScriptPath = "/w";

## Database settings
$wgDBtype = "mysql";

$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";
$wgSQLMode = 'TRADITIONAL';

## Shared memory settings
$wgMainCacheType = 'memcached-pecl';
$wgParserCacheType = CACHE_DB;
$wgSessionCacheType = CACHE_DB;
$wgMemCachedServers = [ 'localhost:11211' ];

$wgShellLocale = "en_US.utf8";
$wgDiff3 = "/usr/bin/diff3";
$wgJobRunRate = 0;

$wgLanguageCode = 'fi';
$wgDefaultUserOptions['usenewrc'] = 1;
$wgIncludejQueryMigrate = true;

$wgGroupPermissions['*']['edit'] = false;
$wgGroupPermissions['sysop']['deletebatch'] = true;
$wgGroupPermissions['*']['viewedittab'] = true;
$wgGroupPermissions['sysop']['viewedittab'] = true;
$wgDisableAnonEdit = true;
$wgGroupPermissions['*']['createpage'] = true;

$wgUseRCPatrol = false;
$wgUseNPPatrol = false;

$wgEnableUploads = true;
$wgUploadPath = "/uploads";
$wgUploadDirectory = "/www/$VHOST/docroot/uploads";
$wgMaxImageArea = 75e6; // 75MP

$wgDefaultUserOptions['usenewrc'] = 1;
$wgRCMaxAge = 365 * 24 * 3600; // 1 year
$wgShowIPinHeader = false;
$wgEnotifWatchlist = true;

$wgCacheDirectory = "/www/$VHOST/cache";

$wgForceHTTPS = true;


require __DIR__ . "/LocalSettings-$VHOST.php";

// wfLoadExtension( 'Elastica' );
// require_once( "$IP/extensions/CirrusSearch/CirrusSearch.php" );
// $wgSearchType = 'CirrusSearch';
// $wgCirrusSearchExtraIndexSettings['index.mapping.total_fields.limit'] = 5000;

// Spam tools
wfLoadExtension( 'Nuke' );
wfLoadExtension( 'UserMerge' );
$wgGroupPermissions['bureaucrat']['usermerge'] = true;
require_once "$IP/extensions/SmiteSpam/SmiteSpam.php";
$wgDisplayPageSize = 10;
wfLoadExtension( 'SpamBlacklist' );
$wgBlacklistSettings = [
        'spam' => [
                'files' => [
                        '/srv/mediawiki/spam-filter.txt',
                ],
        ],
        'email' => [
                'files' =>  [
                        '/srv/mediawiki/email-filter.txt',
                ],
        ],
];

{% if nocaptcha is defined %}
wfLoadExtensions( [ 'ConfirmEdit', 'ConfirmEdit/ReCaptchaNoCaptcha' ] );
$wgReCaptchaSiteKey = '{{ nocaptcha.site }}';
$wgReCaptchaSecretKey = '{{ nocaptcha.secret }}';
$wgReCaptchaSendRemoteIP = true;
$wgCaptchaTriggers['edit'] = false;
$wgCaptchaTriggers['create'] = false;
$wgCaptchaTriggers['addurl'] = false;
$wgCaptchaTriggers['createaccount'] = true;
$wgCaptchaTriggers['badlogin'] = true;
{% endif %}

# Some non-configurable changes to MediaWiki
$wgHooks['GetLocalURL'][] = function ( &$title, &$url, $query ) {
	if ( !$title->isExternal() && $query == '' && $title->isMainPage() ) {
		$url = '/';
	}
};

$wgHooks['TestCanonicalRedirect'][] = function ( $request ) {
	return $request->getRequestURL() !== '/';
};

$wgHooks['LiquidThreadsIsLqtPage'][] = function ( $title, &$isTalkPage ) {
	if ( $title->inNamespace( NS_USER_TALK ) ) {
		$user = User::newFromName( $title->getRootText() );
		$isTalkPage = $user && $user->isRegistered();
	}
};

# This must be in the parent directory, because everything under workdir can be wiped out
# by the ansible scripts. This enables easier development by allowing changing stuff without
# running the slow scripts, as well as keeping those changes.
if ( file_exists( '/srv/mediawiki/LocalLocalSettings.php' ) ) {
	require '/srv/mediawiki/LocalLocalSettings.php';
}
