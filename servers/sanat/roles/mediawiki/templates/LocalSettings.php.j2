<?php
# {{ ansible_managed }}

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

$IP = __DIR__;

# The version of Apache on CENTOS is too old to set environment variables.
# And it does not seem to provide the canonical domain name either. So
# dig out the canonical name from the webroot.
if ( isset( $_ENV['DOCUMENT_ROOT'] ) ) {
	$VHOST = preg_replace( '~^/www/([^/]+)/docroot$~', '\1', $_ENV['DOCUMENT_ROOT'] );
} elseif ( defined( 'MW_DB' ) ) {
	# Set by --wiki parameter for scripts
	$VHOST = MW_DB;
} else {
	echo "Wiki instance must be given. Use --wiki parameter for command line scripts.\n";
	exit();
}

switch ( $VHOST ) {
	case '{{ webdomain_sanat }}':
	case '{{ webdomain_nimiarkisto }}':
		break;
	default:
		$VHOST = htmlspecialchars( $VHOST );
		echo "Unknown wiki instance $VHOST\n";
		exit();
}

$wgServer = "https://$VHOST";

ini_set( 'error_log', "/www/$VHOST/logs/error_php" );
ini_set( 'display_errors',         1 );
ini_set( 'ignore_repeated_errors', 1 );
ini_set( 'log_errors',             1 );
ini_set( 'expose_php',             0 );
ini_set( 'memory_limit',      '350M' );
ini_set( 'max_execution_time', '60s' );

error_reporting( E_ALL | E_STRICT );
date_default_timezone_set( 'UTC' );

$wgShowExceptionDetails  = true;
$wgDebugComments         = true;
$wgDevelopmentWarnings   = true;
$wgDebugTimestamps       = true;
$wgDebugPrintHttpHeaders = false;

$wgCacheDirectory = "/www/$VHOST/cache";
$wgLocalisationCacheConf['store'] = 'file';
$wgLocalisationCacheConf['manualRecache'] = true;
$wgLocalisationCacheConf['storeDirectory'] = "$IP/cache/$VHOST";

$wgSecretKey = file_get_contents( "/www/$VHOST/secretkey" );

$wgLogo = "/logo.png";

$wgArticlePath = "/wiki/$1";
$wgScriptPath = "/w";

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
$wgDBuser = "wikiuser";
$wgDBpassword = "wikipass";

$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

## Shared memory settings
$wgMainCacheType = CACHE_MEMCACHED;
$wgMemCachedServers = array( 'localhost:11211' );
$wgSessionsInObjectCache = true;

$wgShellLocale = "en_US.utf8";
$wgDiff3 = "/usr/bin/diff3";
$wgJobRunRate = 0;

$wgLanguageCode = 'fi';
$wgDefaultUserOptions['usenewrc'] = 1;
$wgIncludejQueryMigrate = true;

$wgGroupPermissions['sysop']['invitesignup'] = true;
$wgGroupPermissions['*']['edit'] = true;
$wgGroupPermissions['*']['createaccount'] = false;
$wgGroupPermissions['sysop']['deletebatch'] = true;
$wgGroupPermissions['*']['viewedittab'] = true;
$wgGroupPermissions['sysop']['viewedittab'] = true;
$wgDisableAnonEdit = false;
$wgGroupPermissions['*']['createpage'] = true;

$wgUseRCPatrol = false;
$wgUseNPPatrol = false;

function lfAddNamespace( $id, $name ) {
	global $wgExtraNamespaces, $wgContentNamespaces, $wgNamespacesToBeSearchedDefault,
		$wgCapitalLinkOverrides, $smwgNamespacesWithSemanticLinks;

	$constant = strtoupper( "NS_$name" );

	define( $constant, $id );
	define( $constant . '_TALK', $id + 1 );

	$wgExtraNamespaces[$id] = $name;
	$wgExtraNamespaces[$id + 1] = $name . '_talk';

	$wgContentNamespaces[] = $id;

	$wgNamespacesToBeSearchedDefault[$id] = true;
	$wgCapitalLinkOverrides[$id] = false;
	$wgCapitalLinkOverrides[$id + 1] = false;

	$smwgNamespacesWithSemanticLinks[$id] = true;
}

if ( $VHOST === '{{ webdomain_sanat }}' ) {
	$wgSitename = 'Sanat';
	$wgDBprefix = '';
	$wgDBname = 'mediawiki';

	wfLoadSkin( 'Vector' );

	enableSemantics( $VHOST );
	wfLoadExtension( 'PageForms' );
	$sfgRedLinksCheckOnlyLocalProps = true;
	$sfgRenameEditTabs = true;
	$smwgQMaxInlineLimit = $wgCategoryPagingLimit = 250;

	require "$IP/extensions/MixedNamespaceSearchSuggestions/MixedNamespaceSearchSuggestions.php";
	require "$IP/extensions/ParserFunctions/ParserFunctions.php";
	require "$IP/extensions/DeleteBatch/DeleteBatch.php";

	require "$IP/extensions/Translate/Translate.php";
	wfLoadExtensions( [ 'UniversalLanguageSelector', 'InputBox', 'Sanat' ] );

	lfAddNamespace( 1200, 'Lud' );
	require "$IP/extensions/Lud/Lud.php";

	lfAddNamespace( 1202, 'WordNet' );
	require_once( "$IP/extensions/WordNet/WordNet.php" );
	$wgNamespacesWithSubpages[NS_WORDNET] = true;
	$wgAllowDisplayTitle = true;
	$wgRestrictDisplayTitle = false;

	// XXX: this is broken. This is not present when MediaWiki runs scripts.
	// The extensions should be installed with co_repos.
	if ( file_exists( "$IP/extensions/Saame/Saame.php" ) ) {
		include_once "$IP/extensions/Saame/Saame.php";
	}
	lfAddNamespace( 1204, 'Sms' );
	lfAddNamespace( 1206, 'Izh' );

	wfLoadExtension( 'Kotus' );
	lfAddNamespace( 1210, 'Vepsä' );
	lfAddNamespace( 1212, 'Slangipaikannimet' );
	lfAddNamespace( 1216, 'Sosva' );
	lfAddNamespace( 1218, 'Suomalais-venäläinen_kirja-alan_sanasto' );
	lfAddNamespace( 1222, 'Namnledslexikon' );

	wfLoadExtension( 'FinnFrameNet' );
	lfAddNamespace( 1214, 'FinnFrameNet' );
	lfAddNamespace( 1220, 'TransFrameNet' );
}

if ( $VHOST === '{{ webdomain_nimiarkisto }}' ) {
	$wgSitename = 'Nimiarkisto';
	$wgDBname = 'nimiarkisto';
	$wgDefaultSkin = 'Timeless';

	wfLoadSkin( 'Timeless' );
	wfLoadExtensions( [ 'UniversalLanguageSelector' ] );

	$wgEnableWikibaseRepo = true;
	$wgEnableWikibaseClient = true;
	require_once "$IP/extensions/Wikibase/repo/Wikibase.php";

	call_user_func( function() {
		global $wgContentHandlerUseDB,
			$wgDBname,
			$wgExtraNamespaces,
			$wgNamespacesToBeSearchedDefault,
			$wgWBRepoSettings;

		$wgContentHandlerUseDB = true;

		$baseNs = 120;

		// Define custom namespaces. Use these exact constant names.
		define( 'WB_NS_ITEM', $baseNs );
		define( 'WB_NS_ITEM_TALK', $baseNs + 1 );
		define( 'WB_NS_PROPERTY', $baseNs + 2 );
		define( 'WB_NS_PROPERTY_TALK', $baseNs + 3 );

		// Register extra namespaces.
		$wgExtraNamespaces[WB_NS_ITEM] = 'Item';
		$wgExtraNamespaces[WB_NS_ITEM_TALK] = 'Item_talk';
		$wgExtraNamespaces[WB_NS_PROPERTY] = 'Wikibase_property';
		$wgExtraNamespaces[WB_NS_PROPERTY_TALK] = 'Wikibase_property_talk';

		// Tell Wikibase which namespace to use for which kind of entity
		$wgWBRepoSettings['entityNamespaces']['item'] = WB_NS_ITEM;
		$wgWBRepoSettings['entityNamespaces']['property'] = WB_NS_PROPERTY;

		// Make sure we use the same keys on repo and clients, so we can share cached objects.
		$wgWBRepoSettings['sharedCacheKeyPrefix'] = $wgDBname . ':WBL/' . rawurlencode( WBL_VERSION );

		// NOTE: no need to set up $wgNamespaceContentModels, Wikibase will do that automatically based on $wgWBRepoSettings

		// Tell MediaWiki to search the item namespace
		$wgNamespacesToBeSearchedDefault[WB_NS_ITEM] = true;

		// the special group includes all the sites in the specialSiteLinkGroups,
		// grouped together in a 'Pages linked to other sites' section.
		$wgWBRepoSettings['siteLinkGroups'] = [];

		// these are the site_group codes as listed in the sites table
		$wgWBRepoSettings['specialSiteLinkGroups'] = [];
	} );

	require_once "$IP/extensions/Wikibase/client/WikibaseClient.php";

	require_once "$IP/extensions/Maps/Maps.php";
	$wgPFEnableStringFunctions = true;
}

# Some non-configurable changes to MediaWiki
$wgHooks['GetLocalURL'][] = function ( &$title, &$url, $query ) {
	if ( !$title->isExternal() && $query == '' && $title->isMainPage() ) {
		$url = '/';
	}
};

$wgHooks['TestCanonicalRedirect'][] = function ( $request ) {
	return $request->getRequestURL() !== '/';
};

# This must be in the parent directory, because everything under workdir can be wiped out
# by the ansible scripts. This enables easier development by allowing changing stuff without
# running the slow scripts, as well as keeping those changes.
if ( file_exists( '/srv/mediawiki/LocalLocalSettings.php' ) ) {
	require '/srv/mediawiki//LocalLocalSettings.php';
}
